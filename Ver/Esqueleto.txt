Perfeito ðŸš€
Vou te montar um **esqueleto de projeto em Python** para rodar no **Raspberry Pi** com **OpenCV + YOLO** para detectar EPIs (capacete, colete, Ã³culos).

Esse esqueleto ainda nÃ£o tem o modelo de IA treinado, mas jÃ¡ deixa a estrutura pronta para vocÃª conectar qualquer modelo prÃ©-treinado (YOLOv5n, YOLOv8, etc.).

---

# ðŸ“‚ Estrutura sugerida do projeto

```
projeto_epi/
â”‚â”€â”€ main.py              # Script principal
â”‚â”€â”€ requirements.txt     # DependÃªncias Python
â”‚â”€â”€ yolov5/              # Pasta do modelo YOLO (se usar YOLOv5)
â”‚â”€â”€ models/              # Modelos treinados (.pt ou .onnx)
â”‚â”€â”€ utils/               # FunÃ§Ãµes auxiliares
â”‚   â””â”€â”€ alertas.py       # Envio de notificaÃ§Ãµes
```

---

# ðŸ“œ CÃ³digo `main.py`

```python
import cv2
import torch  # Usado para carregar modelo YOLO
from utils.alertas import enviar_alerta

# ==============================
# 1. Carregar modelo YOLO
# ==============================
# Baixar um modelo prÃ©-treinado YOLO (ex: yolov5n) antes de rodar
# pip install yolov5  (ou clone do repositÃ³rio oficial)
modelo = torch.hub.load('ultralytics/yolov5', 'yolov5n')  # modelo leve

# Se tiver um modelo treinado para EPI, substitua por:
# modelo = torch.hub.load('ultralytics/yolov5', 'custom', path='models/epi.pt')

# ==============================
# 2. Abrir a cÃ¢mera
# ==============================
cap = cv2.VideoCapture(0)  # 0 = webcam padrÃ£o

print("[INFO] Sistema de monitoramento EPI iniciado...")

while True:
    ret, frame = cap.read()
    if not ret:
        break

    # ==============================
    # 3. Rodar detecÃ§Ã£o YOLO
    # ==============================
    results = modelo(frame)

    # Mostrar resultados na tela
    results.render()  # desenha caixas no frame
    cv2.imshow("Monitoramento EPI", results.ims[0])

    # ==============================
    # 4. Verificar se houve falta de EPI
    # ==============================
    detections = results.pandas().xyxy[0]  # DataFrame com resultados
    if not detections.empty:
        for _, row in detections.iterrows():
            objeto = row['name']  # Nome detectado
            if objeto in ["sem_capacete", "sem_oculos", "sem_colete"]:
                print(f"[ALERTA] {objeto} detectado!")
                enviar_alerta(f"Trabalhador detectado {objeto}")

    # Pressione 'q' para sair
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
```

---

# ðŸ“œ CÃ³digo `utils/alertas.py`

```python
def enviar_alerta(mensagem):
    """
    Envia alerta no console ou por integraÃ§Ã£o futura (e-mail, MQTT, Telegram, etc.)
    """
    print(f"[ALERTA ENVIADO] {mensagem}")

    # Aqui vocÃª pode integrar:
    # - Envio de e-mail (smtplib)
    # - Mensagem no Telegram (requests)
    # - PublicaÃ§Ã£o MQTT (paho-mqtt)
```

---

# ðŸ“œ `requirements.txt`

```
opencv-python
torch
torchvision
pandas
```

---

## ðŸš€ Como rodar no Raspberry Pi

1. Instale Python 3.9+
2. Instale dependÃªncias:

   ```bash
   pip install -r requirements.txt
   ```
3. Rode o script:

   ```bash
   python3 main.py
   ```

---

## ðŸ”® PrÃ³ximos passos

* Usar um modelo YOLO **treinado especificamente para EPIs** (capacete, colete, Ã³culos).
* Conectar sistema de **notificaÃ§Ãµes IoT** (MQTT â†’ dashboard, ou Telegram para alertas).
* Otimizar para Raspberry Pi usando **TensorFlow Lite ou ONNX** para rodar mais leve.

---

ðŸ‘‰ Quer que eu jÃ¡ prepare um **modelo de dataset** (como anotar imagens de trabalhadores com/s/sem EPI) para vocÃª treinar o YOLO nesse caso?
